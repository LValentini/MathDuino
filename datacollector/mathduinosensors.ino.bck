/*
 * WiFlyHQ Example httpserver.ino
 *
 * This sketch implements a simple Web server that waits for requests
 * and serves up a small form asking for a username, then when the
 * client posts that form the server sends a greeting page with the
 * user's name and an analog reading.
 *
 * This sketch is released to the public domain.
 *
 */

 /* Notes:
  * Uses chunked message bodies to work around a problem where
  * the WiFly will not handle the close() of a client initiated
  * TCP connection. It fails to send the FIN to the client.
  * (WiFly RN-XV Firmware version 2.32).
  */

/* Work around a bug with PROGMEM and PSTR where the compiler always
 * generates warnings.
 */
#undef PROGMEM 
#define PROGMEM __attribute__(( section(".progmem.data") )) 
#undef PSTR 
#define PSTR(s) (__extension__({static prog_char __c[] PROGMEM = (s); &__c[0];})) 

#include <WiFlyHQ.h>

#include <SoftwareSerial.h>

#include <math.h>

#define ThermistorPIN 0                 // Analog Pin 0
#define PhotoresistorPIN 1

float vcc = 5.02;                       // only used for display purposes, if used
                                        // set to the measured Vcc.
float pad = 9310;                       // balance/pad resistor value, set this to
                                        // the measured resistance of your pad resistor
float thermr = 2000;                   // thermistor nominal resistance

float Photoresistor(int RawADC) {
   
   int adc_value = RawADC;

   /*float voltage = 5.0 * ((double)adc_value / 1024.0);
   float resistance = (9.31 * 5.02) / voltage - 9.31;
   */

   /*float resistance = ((1024 * pad / RawADC) - pad);
   float illuminance = 255.84 * pow(resistance, -10/9);
   */

    
   float Vo = (5.0/1024) * ((double)adc_value);
   float illuminance = ((2500 / Vo) - 500 ) / 9.4;

   
   /*
   int adc_value = RawADC;
   float voltage = 5.0 * ((double)adc_value / 1024.0);
   float illuminance = 500 /(8*((5-voltage)/voltage));
   */
   return illuminance;
}

// Cnt is the number of reads that will be averaged
// pin is the analog pinnumber the LDR is connected to.
float ReadLDR(unsigned int cnt, int pin)
{
  if (cnt > 1000) cnt = 1000;
  else if (cnt == 0) cnt = 1;
  
  // multiple samples to stabilize
  float v;
  for (int i=0; i<cnt; i++) v += analogRead(pin);
  v = (v * 5.0) / 1023 / cnt;     // map to 0..5 Volts
  return v;
}

float Thermistor(int RawADC) {
  long Resistance;  
  float Temp;  // Dual-Purpose variable to save space.

  float a = -0.0008150782317;
  float b = 0.0006688923709;
  float c = -0.000002039768121;
  
  Resistance=((1024 * pad / RawADC) - pad);
  Temp = log(Resistance); // Saving the Log(resistance) so not to calculate  it 4 times later
  //Temp = 1 / (0.001129148 + (0.000234125 * Temp) + (0.0000000876741 * Temp * Temp * Temp));
  
  Temp = 1 / (a + (b * Temp) + (c * Temp * Temp * Temp));
  
  Temp = Temp - 273.15;  // Convert Kelvin to Celsius                      

  // BEGIN- Remove these lines for the function not to display anything
  //Serial.print("ADC: ");
  //Serial.print(RawADC);
  //Serial.print("/1024");                           // Print out RAW ADC Number
  //Serial.print(", vcc: ");
  //Serial.print(vcc,2);
  //Serial.print(", pad: ");
  //Serial.print(pad/1000,3);
  //Serial.print(" Kohms, Volts: ");
  //Serial.print(((RawADC*vcc)/1024.0),3);  
  //Serial.print(", Resistance: ");
  //Serial.print(Resistance);
  //Serial.print(" ohms, ");
  // END- Remove these lines for the function not to display anything

  // Uncomment this line for the function to return Fahrenheit instead.
  //temp = (Temp * 9.0)/ 5.0 + 32.0;                  // Convert to Fahrenheit
  return Temp;                                      // Return the Temperature
}

SoftwareSerial wifiSerial(2,3);

//#include <AltSoftSerial.h>
//AltSoftSerial wifiSerial(8,9);

WiFly wifly;

/* Change these to match your WiFi network */
//const char mySSID[] = "Kobol";
//const char myPassword[] = "F1b0,N4Cc1";

const char mySSID[] = "wicesarebackup";
const char myPassword[] = "asdlkjasdlkj1";

//const char mySSID[] = "wicesare";
//const char myPassword[] = "asdlkjasdlkj1";

char macaddr[20];

void sendPong();
void sendSensorsDataXML();
void send404();

char buf[150];
char convbuf[10];
char scanbuf[500];

void setup()
{

    Serial.begin(115200);
    Serial.println(F("Starting"));
    Serial.print(F("Free memory: "));
    Serial.println(wifly.getFreeMemory(),DEC);

    wifiSerial.begin(9600);
    if (!wifly.begin(&wifiSerial, &Serial)) {
        Serial.println(F("Failed to start wifly"));
	wifly.terminal();
    }

	wifly.leave();

	delay(1000);

	wifly.scan(scanbuf, sizeof(scanbuf));
	Serial.println(scanbuf);

    /* Join wifi network if not already associated */
    if (!wifly.isAssociated()) {
	/* Setup the WiFly to connect to a wifi network */
		Serial.println(F("Joining network"));
		wifly.setSSID(mySSID);
		wifly.setPassphrase(myPassword);
		wifly.enableDHCP();
		wifly.setDHCP(1);
		wifly.save();

		if (wifly.join()) {
		    Serial.println(F("Joined wifi network"));
		} else {
		    Serial.println(F("Failed to join wifi network"));
		    wifly.terminal();
		}
    } else {
        Serial.println(F("Already joined network"));
    }

    wifly.setBroadcastInterval(0);	// Turn off UPD broadcast

    //wifly.terminal();

    Serial.print(F("MAC: "));
    Serial.println(wifly.getMAC(macaddr, sizeof(macaddr)));
    Serial.print(F("IP: "));
    Serial.println(wifly.getIP(buf, sizeof(buf)));

    wifly.setDeviceID("Wifly-WebServer");

    if (wifly.isConnected()) {
        Serial.println(F("Old connection active. Closing"));
	wifly.close();
    }

    wifly.setProtocol(WIFLY_PROTOCOL_TCP | WIFLY_PROTOCOL_UDP);
    if (wifly.getPort() != 80) {
        wifly.setPort(80);
	/* local port does not take effect until the WiFly has rebooted (2.32) */
	wifly.save();
	Serial.println(F("Set port to 80, rebooting to make it work"));
	wifly.reboot();
	delay(3000);
    }
    Serial.println(F("Ready"));

}

void loop()
{

    if (wifly.available() > 0) {

    	/* See if there is a request */
		if (wifly.gets(buf, sizeof(buf))) {
		    if (strncmp_P(buf, PSTR("GET / "), 6) == 0) {

				/* GET request */
				Serial.println(F("Got GET request"));
				while (wifly.gets(buf, sizeof(buf)) > 0) {
				    /* Skip rest of request */
				}
				sendPong();
				Serial.println(F("Sent index page"));

	   	 	} else if (strncmp_P(buf, PSTR("POST"), 4) == 0) {

	        	/* POST request */
	        	Serial.println(F("Got POST: sendind sensors data"));
		    	wifly.flushRx();		// discard rest of input
				sendSensorsDataXML();
		    	Serial.println(F("Sent sensors report!"));

	    	} else {

	       		/* Unexpected request */
				Serial.print(F("Unexpected: "));
				Serial.println(buf);
				wifly.flushRx();		// discard rest of input
				Serial.println(F("Sending 404"));
				send404();

	    	}
		}
    }
}

/** Send an index HTML page with an input box for a username */
void sendPong()
{
    /* Send the header direclty with print */
    wifly.println(F("HTTP/1.1 200 OK"));
    wifly.println(F("Content-Type: text/xml"));
    wifly.println(F("Transfer-Encoding: chunked"));
    wifly.println();

    /* Send the body using the chunked protocol so the client knows when
     * the message is finished.
     * Note: we're not simply doing a close() because in version 2.32
     * firmware the close() does not work for client TCP streams.
     */
    wifly.sendChunkln(F("<?xml version=\"1.0\" encoding=\"UTF-8\"?>"));
	snprintf_P(buf, sizeof(buf), PSTR("<pong>%s</pong>"), macaddr);
    wifly.sendChunkln(buf);

    wifly.sendChunkln();
}

void sendSensorsDataXML() {
    /* Send the header directly with print */
    wifly.println(F("HTTP/1.1 200 OK"));
    wifly.println(F("Content-Type: text/xml"));
    wifly.println(F("Transfer-Encoding: chunked"));
    wifly.println();

    /* Send the body using the chunked protocol so the client knows when
     * the message is finished.
     */
    wifly.sendChunkln(F("<?xml version=\"1.0\" encoding=\"UTF-8\"?>"));
    wifly.sendChunkln(F("<datacollector>"));

	snprintf_P(buf, sizeof(buf), PSTR("<dcid>%s</dcid>"), macaddr);
    wifly.sendChunkln(buf);

    wifly.sendChunkln(F("<geoloc>"));
	int ind;

	char scanbufcpy[500];
	strncpy(scanbufcpy, scanbuf, 500);

	char *ap, *oap;
	char *apdesctok, *apdesc;
	ap = strtok_r(scanbufcpy, "|", &oap);
	while(ap != NULL) {

    	wifly.sendChunkln(F("<ap>"));
		
		ind = 0;
		apdesctok = strtok_r(ap, " ", &apdesc);	
		while(apdesctok != NULL) {
			ind++;
			switch(ind) {
				case 3:
					snprintf_P(buf, sizeof(buf), PSTR("<channel>%s</channel>"), apdesctok);
    				wifly.sendChunkln(buf);
					break;
				case 4:
					snprintf_P(buf, sizeof(buf), PSTR("<rssi>%s</rssi>"), apdesctok);
    				wifly.sendChunkln(buf);
					break;
				case 6:
					snprintf_P(buf, sizeof(buf), PSTR("<mac>%s</mac>"), apdesctok);
    				wifly.sendChunkln(buf);
					break;
				default:
					;
			}
			apdesctok = strtok_r(NULL, " ", &apdesc);	
		}

    	wifly.sendChunkln(F("</ap>"));
		
		Serial.println();
		ap = strtok_r(NULL, "|", &oap);
	}
    wifly.sendChunkln(F("</geoloc>"));

    wifly.sendChunkln(F("<sensors>"));

    /* Include a reading from Analog pin 0 */
	dtostrf(Thermistor(analogRead(ThermistorPIN)), 5,2, convbuf);
    snprintf_P(buf, sizeof(buf), PSTR("<sensor><type>temp</type><value>%s</value></sensor>"), convbuf);
    wifly.sendChunkln(buf);

	dtostrf(Photoresistor(analogRead(PhotoresistorPIN)), 5,2, convbuf);
    snprintf_P(buf, sizeof(buf), PSTR("<sensor><type>light</type><value>%s</value></sensor>"), convbuf);
    Serial.print(Photoresistor(analogRead(PhotoresistorPIN))); Serial.println("");
    wifly.sendChunkln(buf);
    
	sprintf(convbuf,"NA");
	snprintf_P(buf, sizeof(buf), PSTR("<sensor><type>humidity</type><value>%s</value></sensor>"), convbuf);
    wifly.sendChunkln(buf);
	
	sprintf(convbuf,"NA");
	snprintf_P(buf, sizeof(buf), PSTR("<sensor><type>pressure</type><value>%s</value></sensor>"), convbuf);
    wifly.sendChunkln(buf);

    wifly.sendChunkln(F("</sensors>"));
    wifly.sendChunkln(F("</datacollector>"));
    wifly.sendChunkln();

}

/** Send a 404 error */
void send404()
{
    wifly.println(F("HTTP/1.1 404 Not Found"));
    wifly.println(F("Content-Type: text/html"));
    wifly.println(F("Transfer-Encoding: chunked"));
    wifly.println();
    wifly.sendChunkln(F("<html><head>"));
    wifly.sendChunkln(F("<title>404 Not Found</title>"));
    wifly.sendChunkln(F("</head><body>"));
    wifly.sendChunkln(F("<h1>Not Found</h1>"));
    wifly.sendChunkln(F("<hr>"));
    wifly.sendChunkln(F("</body></html>"));
    wifly.sendChunkln();
}
